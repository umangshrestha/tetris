{"version":3,"sources":["components/shape.jsx","components/square.jsx","App.js","reportWebVitals.js","index.js"],"names":["DEFAULT_VALUE","SHAPE","getRandomShape","Math","ceil","length","random","getShape","shapePos","rotatePos","xPos","yPos","map","row","rowPos","col","colPos","InitialState","ROW_SIZE","board","Array","_","speed","isPause","score","COLOR_MAP","Square","props","style","colorVal","color","height","width","borderStyle","borderWidth","justifyContent","backgroundColor","margin","display","gridTemplate","increaseSpeed","App","resetGame","setState","s","shiftRight","isRight","curShape","state","deltaX","func","edgeVal","max","apply","isEdge","min","isConflict","forEach","oldArray","newArray","filter","val","edgeValue","rotateClockwise","isClockwise","newState","newShape","conflictedArray","elem","console","log","getNextBlock","updateBoard","i","pos","j","shiftDown","bottomValue","undefined","alert","pauseGame","keyInput","keyCode","mutex","lock","Mutex","this","periodicInterval","setInterval","document","onkeydown","clearInterval","name","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a96835cd.chunk.js","sourcesContent":["export const ROW_SIZE = 8;\nexport const COL_SIZE = 15                                                  ;\nexport const DEFAULT_VALUE = -1;\n\n\nconst SHAPE = [\n    /* --------------- */\n    [ \n        [ // I\n            [1, 1, 1, 1]\n        ], \n        [ \n            [1],\n            [1],\n            [1],\n            [1],\n        ]\n    ],[\n    /* --------------- */\n    \n        [ // T\n            [1, 1, 1], \n            [0, 1, 0]\n        ],\n        [   \n            [1, 0],\n            [1, 1],\n            [1, 0]\n    \n        ],[\n            [0, 1, 0],\n            [1, 1, 1],\n        ],[  \n            [0, 1],\n            [1, 1],\n            [0, 1],\n        ]\n    ],[\n    /* --------------- */\n        [ // L\n            [1, 1, 1],\n            [1, 0, 0],\n        ],[\n            [1, 0],\n            [1, 0],\n            [1, 1],\n        ],[\n            [0, 0, 1],\n            [1, 1, 1],\n        ],[\n            [1, 1],\n            [0, 1],\n            [0, 1],\n        ]\n    ],[ \n    /* --------------- */\n        [  // J\n            [1, 0, 0],\n            [1, 1, 1],\n        ],[\n            [1, 1],\n            [1, 0],\n            [1, 0],\n        ],[\n            [1, 1, 1],\n            [0, 0, 1],\n        ],[\n            [0, 1],\n            [0, 1],\n            [1, 1],\n        ]\n    ], [\n    /* --------------- */\n        [   // Z\n            [1, 1, 0],\n            [0, 1, 1],\n        ],[\n            [0, 1],\n            [1, 1],\n            [1, 0],\n        ]\n    ],[\n    /* --------------- */\n        [ // S\n            [0, 1, 1],\n            [1, 1, 0],\n        ],[\n            [1, 0],\n            [1, 1],\n            [0, 1],\n        ]\n    ],[\n    /* --------------- */\n        [ // O\n            [1, 1],\n            [1, 1],\n        ]\n    ]\n]\n\n\n// creates empty board\nexport const emptyBoard = () => [...Array(ROW_SIZE * COL_SIZE)].map( _ => DEFAULT_VALUE) \n\n// Returns the shapewhich represents postion in the SHAPE array\n// If we get return value 1 then it reresents I\nexport const getRandomShape = () => Math.ceil((SHAPE.length - 1) * Math.random());\n\n// Returns 2D array that represents the current shape with the accurate position\nexport const getShape = ({shapePos, rotatePos, xPos, yPos}) => SHAPE[shapePos][rotatePos].map(\n        (row, rowPos) => row.map(\n            (col, colPos) => col? (xPos + colPos + ROW_SIZE * (rowPos + yPos)): DEFAULT_VALUE))\n\n\n//  updatest the rotate pos that represents the roatation for given shape\nexport const rotateShape = (isClockwise, {shapePos, rotatePos}) => isClockwise? \n    (rotatePos === 0)? (SHAPE[shapePos].length - 1) :  (rotatePos - 1):  \n    (rotatePos === (SHAPE[shapePos].length - 1))? 0:(rotatePos + 1);\n\n\nexport const InitialState = () => {\n    return {\n    shapePos  :  getRandomShape(),  // pointers to show which type of shape we are using\n    rotatePos :  0,                 // pointer to represent which rotation of shape we are using\n    xPos      : ROW_SIZE / 2,       // postion of current shape in x direction\n    yPos      :  -3,                // postion of variable in y direction\n    board     : emptyBoard(),\n    speed     : 500,\n    isPause   : false,\n    score     : 0,\n    }  \n}\n\n","import React from 'react';\n\n// Mapping color to shape\nconst COLOR_MAP = [\n    \"black\",    //None\n    \"pink\",     //I\n    \"purple\",   //T\n    \"green\",    //L\n    \"brown\",    //J\n    \"red\",      //Z\n    \"orange\",   //S\n    \"blue\",     //O\n]\n\n/* for css */\nconst getStyle = (colorVal) => {\n    return {\n        height          : \"35px\",\n        width           : \"35px\",\n        borderStyle     : \"solid\",\n        borderWidth     : \"1px\",\n        color           : \"black\",\n        justifyContent  : \"center\",\n        backgroundColor : COLOR_MAP[colorVal],\n    }\n}\n\nconst Square = (props) =>  <div style={getStyle(props.color + 1)} /> \n\nexport default Square;\n","import './App.css';\nimport React, {Component} from 'react';\nimport {COL_SIZE, ROW_SIZE} from './components/shape';\nimport * as s from  './components/shape';\nimport Square from \"./components/square\";\nimport Mutex from \"await-mutex\";\n\nconst style = {\n\twidth        : \"250px\",\n\theight       : \"250px\",\n\tmargin       : \"0 auto\",\n\tdisplay      : \"grid\",\n  borderWidth  : \"10px\",\n \tgridTemplate : `repeat(${COL_SIZE}, 1fr) / repeat(${ROW_SIZE}, 1fr)`,\n};\n\nconst LEFT         = 37; /* left arrow */\nconst ROTATE_UP    = 90; /* z */\nconst RIGHT        = 39; /* right arrow */\nconst DOWN         = 40; /* down arrow */\nconst ROTATE_DOWN  = 88; /* x */\nconst STOP         = 32; /* space */\n\n\n\nconst increaseSpeed = ({speed}) => speed - 10 *(speed > 10)\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state        = s.InitialState();  \n    this.mutex = new Mutex();\n  }\n\n  resetGame = () => this.setState(s.InitialState())\n\n  componentDidMount() {\n    this.periodicInterval = setInterval( () =>{\n      this.mutex.lock();\n      if (!this.state.isPause) {\n        this.updateBoard({shapePos: s.DEFAULT_VALUE});\n        this.shiftDown();\n        this.updateBoard(this.state);\n        this.setState({score: this.state.score+1})\n      }\n    }, this.state.speed);\n    document.onkeydown = this.keyInput;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.periodicInterval);\n  }\n  \n  // shift\n  shiftRight = (isRight) => {\n    let curShape = s.getShape(this.state);\n    let {deltaX, func, isEdge} = isRight? \n                      { \n                        deltaX: 1, \n                        func: edgeVal => Math.max.apply(null, edgeVal),\n                        isEdge: this.state.xPos + curShape[0].length === ROW_SIZE,\n                      }: {\n                        deltaX: -1, \n                        func: edgeVal => Math.min.apply(null, edgeVal),\n                        isEdge: this.state.xPos === 0,\n                      };\n    // Making sure we are not going off the edge\n    if (isEdge) {\n      return;\n    }\n\n    //Making sure we are not overlaping other shape\n    let isConflict = false;\n    \n    curShape.forEach(oldArray =>  {\n      // Removing elemnts that are not part of block\n      let newArray  = oldArray.filter(val => val !== s.DEFAULT_VALUE);\n      // checking the edge most value after we shift\n      let edgeValue = func(newArray) + deltaX;\n      // checking that there is no conflict\n      if (this.state.board[edgeValue] !== s.DEFAULT_VALUE) {\n        isConflict = true;\n      }\n    })\n\n    // Shifting if there is not conflict\n    if (!isConflict) {\n      this.setState({ xPos: this.state.xPos +deltaX});\n    }\n  }  \n\n  // rotate\n  rotateClockwise = (isClockwise) => {\n    let newState = {...this.state}\n    newState.rotatePos = s.rotateShape(isClockwise, this.state);       \n    let newShape = s.getShape(newState);\n    \n    let isConflict = false;\n    newShape.forEach(newArray => {\n      // changing pos for element whieh are present in pos i.e it is not equal to default \n      let conflictedArray = newArray.filter( elem  => \n        // removing values that are not there in shape\n        (elem !== s.DEFAULT_VALUE) &&  \n        // remove values that don't conflict with other shape\n        (this.state.board[elem] !== s.DEFAULT_VALUE))\n      console.log(newArray, conflictedArray, isConflict, (newState.xPos + newShape.length > ROW_SIZE));\n      \n      // checking for conflict and making sure it is not going off edge\n      if ((conflictedArray.length!==0) || (newState.xPos + newShape.length >= ROW_SIZE)) {\n        isConflict = true;\n      }\n    })\n    if (!isConflict) {\n      this.setState({ rotatePos: newState.rotatePos}); \n    } \n  } \n\n  getNextBlock = () => {\n    let curShape = s.getShape(this.state);\n    this.updateBoard(this.state);\n   \n    for(let i=0; i< curShape.length; i++) {\n      // getting the row that the shape is touching\n      let row = [...Array(ROW_SIZE)].map( (_, pos) => pos + ROW_SIZE * (this.state.yPos + i))\n\n      // getting the value of all the bottom elements\n      let isFilled = row.map( pos => this.state.board[pos])\n        // checking the squares which are not filled\n        .filter(val => val !== s.DEFAULT_VALUE)\n        .length === ROW_SIZE;\n      if (isFilled) {\n        let board = [...this.state.board];\n        // clearing the row\n        row.forEach(pos => board[pos] = s.DEFAULT_VALUE)\n        // dropiing the above row by one column\n        for(let j=row[0]; j>0; j--) {\n          if (board[j] !== s.DEFAULT_VALUE){\n            board[j+ROW_SIZE] = board[j]; \n            board[j] = s.DEFAULT_VALUE;\n          }\n        }\n        this.setState({board: board});\n      }\n    }\n   \n    // once the postion block touches the edge then checking if we can clear it\n    this.setState({\n      shapePos : s.getRandomShape(),\n      speed    : increaseSpeed(this.state),\n      yPos     : -3,\n      xPos     : ROW_SIZE/2,\n      rotatePos :  0,   \n    });\n  }\n\n  shiftDown = () => {\n    let curShape = s.getShape(this.state);\n    // Checking if bottom of the board is touched\n    if (this.state.yPos + curShape.length >= COL_SIZE) {\n      this.getNextBlock();\n      return\n    }\n\n    // checking that there is no conflict\n    curShape[0].forEach((_, pos) => {\n      \n      let newArray = curShape.map(row => (row[pos]=== s.DEFAULT_VALUE)? -1: row[pos] + ROW_SIZE)\n      let bottomValue = Math.max.apply(Math, newArray)\n      if (\n        // handling the shape before it touches the board\n        (this.state.board[bottomValue] !== undefined) &&\n        // checking if there is no collision\n        this.state.board[bottomValue] !== s.DEFAULT_VALUE \n      ) {\n\n        if (this.state.yPos <= 0 && this.state.yPos !== -3){\n          this.getNextBlock();\n          alert('Game Over');\n          this.resetGame();\n        } else {\n          this.getNextBlock();\n        }\n        return;\n      }\n    })\n\n\n    this.setState({yPos: this.state.yPos+1});    \n  }\n\n  updateBoard = ({shapePos}) => {\n    let board = [...this.state.board];\n    let curShape = s.getShape(this.state);\n    curShape.forEach( row => \n      row.forEach(pos => {\n        if (pos !== s.DEFAULT_VALUE) {\n          board[pos] = shapePos;\n        }\n    }));\n    this.setState({board: board});\n  }\n \n  pauseGame = () => this.setState({isPause: !this.state.isPause});\n\n  keyInput = ({keyCode}) => {\n    this.mutex.lock();\n    if (this.state.isPause) {\n      if (keyCode === STOP) {\n        this.pauseGame();\n      }\n      return;\n    }\n\n    // clearing the board\n    this.updateBoard({shapePos: s.DEFAULT_VALUE});\n\n    switch (keyCode) {\n      case LEFT: \n      case RIGHT:\n        this.shiftRight(keyCode===RIGHT); \n        break;\n      case ROTATE_UP: \n      case ROTATE_DOWN: \n          this.rotateClockwise(keyCode===ROTATE_UP);\n          break;\n      case DOWN:\n          // this.detectCollision();\n          this.shiftDown()\n          break;\n      case STOP: \n        this.pauseGame();\n        break;\n    }\n    this.updateBoard(this.state);\n  }\n  \n  render() {\n    const board =  this.state.board.map( (val, pos) => <Square key={pos} name={pos} color={val}/>);\n    return (\n      <div className=\"App\">\n        <h1>  Tetris  {this.state.score}</h1>\n        <div style={style}> \n          {board}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}